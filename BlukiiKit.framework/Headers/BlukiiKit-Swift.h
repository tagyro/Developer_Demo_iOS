// Generated by Apple Swift version 1.2 (swiftlang-602.0.49.3 clang-clang-602.0.49)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
#if __has_feature(nullability)
#  define SWIFT_NULLABILITY(X) X
#else
# if !defined(__nonnull)
#  define __nonnull
# endif
# if !defined(__nullable)
#  define __nullable
# endif
# if !defined(__null_unspecified)
#  define __null_unspecified
# endif
#  define SWIFT_NULLABILITY(X)
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import CoreBluetooth;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class BKBlukiiDescription;
@class CBCharacteristic;
@class NSError;


/// @class      BKProfileHandlerTemplate
///
/// BKProfileHandlerTemplate implements a template for a genralized handling of profile interaction. It implements the redirection of the forwarded callbacks to the appropriate methods and a mechanism which determines wheter an instance can handle a callback for a given characteristic based on information, provied by the subclass. It also implements a mechanism to resolve a pair of a Servic UUID and a Characteristic UUID to a CBCharacteristic.
///
/// If you want to implement a new BKProfileHandler by extending this template you need to override the following methods:
///
/// <ul><li><p>handleDidUpdateValueForCharacteristic:error:</p></li><li><p>handleDidWriteValueForCharacteristic:error:</p></li><li><p>handleDidUpdateSubscriptionForCharacteristic:error:</p></li></ul>
/// Furthermore you need to provide information about the characteristics your class can handle by overriding the internal methods in the topic 'Supported Characteristics'.
///
/// In your custom profile handler you should keep a certain terminology that is used in all existing profile handlers. The following table shows the frameworks equivalent term for the Core Bluetooth terms:
///
/// |   Core Bluetooth          |       BlukiiKit Profile Handler                   |
/// |===========================|===================================================|
/// | readValue                 | update{YOUR_CHARACTERISTIC_NAME}                  |
/// |---------------------------|---------------------------------------------------|
/// | writeValue                | change{YOUR_CHARACTERISTIC_NAME}To                |
/// |---------------------------|---------------------------------------------------|
/// | setNotifyValue  TRUE      | subscribeTo{YOUR_CHARACTERISTIC_NAME}             |
/// |---------------------------|---------------------------------------------------|
/// | setNotifyValue  FALSE     | unsubscribeFrom{YOUR_CHARACTERISTIC_NAME}         |
/// |---------------------------|---------------------------------------------------|
///
/// One exception of that terminology could be if there is a set of distinct values you can write to characteristic, like e.g. an enabler characteristic that takes numeric value for true and false.
/// In such a case you should give the methods names that explain what you are going to do with the characteristic by writing the value to it.
/// A good example is the enabler characteristic from the BKEnableableProfileHandlerTemplate subclasses. The methods that write a value to the enabler characteristic are named "enableProfile" and "disableProfile".
///
/// THIS IS CLASS IS INTENDED FOR THE INTERNAL USE IN THAT FRAMEWORK ONLY. DO NOT TRY TO CREATE AN INSTANCE OF THIS CLASS. THE INTERNAL TEMPLATE METHODS WILL RAISE AN FATAL ERROR IF YOU TRY TO HANDLE AN PERIPHERAL CALLBACK WITH AN INSTANCE OF THIS CLASS.
///
/// @seealso    BKEnableableProfileHandlerTemplate
SWIFT_CLASS("_TtC9BlukiiKit24BKProfileHandlerTemplate")
@interface BKProfileHandlerTemplate : NSObject
@property (nonatomic, readonly, copy) NSString * __nonnull handlerType;
+ (NSString * __nonnull)handlerTypeOfClass;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithBlukii:(BKBlukiiDescription * __nonnull)blukii OBJC_DESIGNATED_INITIALIZER;
- (BOOL)canHandleDidUpdateValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic;
- (void)handleDidUpdateValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (BOOL)canHandleDidWriteValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic;
- (void)handleDidWriteValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (BOOL)canHandleDidUpdateSubscriptionForCharacteristic:(CBCharacteristic * __nonnull)characteristic;
- (void)handleDidUpdateSubscriptionForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
@end



/// @class  BKEnableableProfileHandlerTemplate
///
/// The BKEnableableProfileHandlerTemplate class is a subclass of BKProfileHandlerTemplate and implements the handling of the enabler characteristic for all profiles, that need to be enabled.
/// Concrete subclasses only need to provide the Service UUID and the Characteristic UUID of the appropriate enabler characteristic.
///
/// THIS IS CLASS IS INTENDED FOR THE INTERNAL USE IN THAT FRAMEWORK ONLY. DO NOT TRY TO CREATE AN INSTANCE OF THIS CLASS. THE INTERNAL TEMPLATE METHODS WILL RAISE AN FATAL ERROR IF YOU TRY TO HANDLE AN PERIPHERAL CALLBACK WITH AN INSTANCE OF THIS CLASS.
SWIFT_CLASS("_TtC9BlukiiKit34BKEnableableProfileHandlerTemplate")
@interface BKEnableableProfileHandlerTemplate : BKProfileHandlerTemplate
- (void)handleDidUpdateValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)handleDidWriteValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)handleDidUpdateSubscriptionForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;

/// @method     enableProfile:
///
/// Writes the appropriate value to enable the profile to the enabler characteristic.
///
/// @param      completion  The BKProfileOperationCompletion that shall be called on completion of the writing.
- (void)enableProfile:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;

/// @method     disableProfile:
///
/// Writes the appropriate value to disable the profile to the enabler characteristic.
///
/// @param      completion  The BKProfileOperationCompletion that shall be called on completion of the writing.
- (void)disableProfile:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;

/// @method     updateEnabler:
///
/// Reads the value of the enabler characteristic.
///
/// @param      completion  The BKProfileOperationCompletion that shall be called on completion of the read.
- (void)updateEnabler:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;

/// @method     subscribeToEnabler:callOnNotify:
///
/// Sets the notify value for the enabler characteristic to true.
///
/// @param      completion  The BKProfileOperationCompletion that shall be called on completion of the notifcation value update.
///
/// @param      onNotify    The BKProfileOperationCompletion that shall be called when the characteristic sends a notification with the updated value.
- (void)subscribeToEnabler:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotify:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotify;

/// @method     unsubscribeFromEnabler:
///
/// Sets the notify value for the enabler characteristic to false.
///
/// @param      completion  The BKProfileOperationCompletion that shall be called on completion of the notifcation value update.
- (void)unsubscribeFromEnabler:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithBlukii:(BKBlukiiDescription * __nonnull)blukii OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9BlukiiKit29BKAccelerometerProfileHandler")
@interface BKAccelerometerProfileHandler : BKEnableableProfileHandlerTemplate
- (void)handleDidUpdateValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)handleDidWriteValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)handleDidUpdateSubscriptionForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)updateRange:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateXValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToXValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotify:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotifiy;
- (void)unsubscribeFromXValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateYValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToYValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotify:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotifiy;
- (void)unsubscribeFromYValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateZValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToZValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotify:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotifiy;
- (void)unsubscribeFromZValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateFilter:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)changeFilterTo:(uint16_t)filter completion:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateEventConfig:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateEventMode:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateEventState:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)activateAccelerationMonitoring:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)deactivateAccelerationMonitoring:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToEventState:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotify:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotify;
- (void)unsubscribeFromEventState:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateSwitchSense:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)changeSwitchSenseTo:(uint8_t)value completion:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateSwitchState:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)activateSwitch:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)deactivateSwitch:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToSwitchState:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotify:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotifiy;
- (void)unsubscribeFromSwitchState:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithBlukii:(BKBlukiiDescription * __nonnull)blukii OBJC_DESIGNATED_INITIALIZER;
@end

@class CBPeripheral;
@class BKBlukiiDeviceContext;
@class CBService;


/// @class      BKProfileLoaderTemplate
///
/// This class implements a template for a genralized discovery process. You can use this template to implement your own profile loaders or to discover a certain set of GATT services and characteristics. All you need to do is to override the internal methods below in the topic 'Template Methods'. The BKProfileLoaderTemplate will do the following steps to discover the concrete profile:
///
/// <ul><li><p>At first it will be checked wheter the given blukii is supported by comparing the device information. If these information are not available yet in the given BKBlukiiDescription they will be determined my the BKProfileLoaderTemplate.</p></li><li><p>The next step is to check which of the specified services are not yet discoverd.</p></li><li><p>After the discovery of the missing services the BKProfileLoaderTemplate will check for each service what characteristics are not yet discovered and will discover the missing ones.</p></li><li><p>If everything succeeded the BKProfileLoaderTemplate will add the BKProfileHandler instance, provided by the concrete subclass of BKProfileLoaderTemplate, to the BKBlukiiDeviceContext, associated with the BKBlukiiDescription. If there is no BKBlukiiDeviceContext a new one will be crearted with the current BKBlukiiDescription.</p></li></ul>
/// To subclass this template all you need to do is to provide the following information:
///
/// <ul><li><p>The minimum firmware revision</p></li><li><p>The services, that shall be discovered</p></li><li><p>For each service to discover the characteristic, that shall be discovered.</p></li><li><p>A instance of BKProfileHandler, that is responsible for handling the interaction with the loaded profile.</p></li></ul>
/// THIS IS CLASS IS INTENDED FOR THE INTERNAL USE IN THAT FRAMEWORK ONLY. DO NOT TRY TO CREATE AN INSTANCE OF THIS CLASS. THE INTERNAL TEMPLATE METHODS WILL RAISE AN FATAL ERROR IF YOU TRY TO LOAD A PROFILE WITH AN INSTANCE OF THIS CLASS.
SWIFT_CLASS("_TtC9BlukiiKit23BKProfileLoaderTemplate")
@interface BKProfileLoaderTemplate : NSObject <CBPeripheralDelegate>
+ (BKBlukiiDescription * __nullable)evaluatePeripheral:(CBPeripheral * __nonnull)peripheral;
- (void)loadProfileForBlukii:(BKBlukiiDescription * __nonnull)blukii completeWith:(void (^ __nonnull)(BKBlukiiDeviceContext * __nullable, NSError * __nullable))completion;
- (void)peripheral:(CBPeripheral * __null_unspecified)peripheral didDiscoverServices:(NSError * __null_unspecified)error;
- (void)peripheral:(CBPeripheral * __null_unspecified)peripheral didDiscoverCharacteristicsForService:(CBService * __null_unspecified)service error:(NSError * __null_unspecified)error;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// @class  BKAccelerometerProfileLoader
///
/// A concrete BKProfileLoader to load the Accelerometer profile.
SWIFT_CLASS("_TtC9BlukiiKit28BKAccelerometerProfileLoader")
@interface BKAccelerometerProfileLoader : BKProfileLoaderTemplate
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9BlukiiKit25BKAltimeterProfileHandler")
@interface BKAltimeterProfileHandler : BKEnableableProfileHandlerTemplate
- (void)handleDidUpdateValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)handleDidWriteValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)handleDidUpdateSubscriptionForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)updateMode:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotify:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotify;
- (void)unsubscribeFromValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateEventConfig:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateEventState:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToEventState:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotifiy:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotify;
- (void)unsubscribeFromEventState:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)changeSubscriptionValueForValueCharacteristic:(BOOL)value completion:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion onNotify:(void (^ __nullable)(CBCharacteristic * __nonnull, NSError * __nullable))onNotify;
- (void)changeSubscriptionValueForEventStateCharacteristic:(BOOL)value completion:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion onNotify:(void (^ __nullable)(CBCharacteristic * __nonnull, NSError * __nullable))onNotify;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithBlukii:(BKBlukiiDescription * __nonnull)blukii OBJC_DESIGNATED_INITIALIZER;
@end



/// @class  BKLightProfileLoader
///
/// A concrete BKProfileLoader to load the Light profile.
SWIFT_CLASS("_TtC9BlukiiKit24BKAltimeterProfileLoader")
@interface BKAltimeterProfileLoader : BKProfileLoaderTemplate
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9BlukiiKit30BKBatteryServiceProfileHandler")
@interface BKBatteryServiceProfileHandler : BKProfileHandlerTemplate
- (void)updateBatteryLevel:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)handleDidUpdateValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)handleDidWriteValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)handleDidUpdateSubscriptionForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithBlukii:(BKBlukiiDescription * __nonnull)blukii OBJC_DESIGNATED_INITIALIZER;
@end



/// @class  BKBatteryServiceProfileLoader
///
/// A concrete BKProfileLoader to load the Battery Service profile.
SWIFT_CLASS("_TtC9BlukiiKit29BKBatteryServiceProfileLoader")
@interface BKBatteryServiceProfileLoader : BKProfileLoaderTemplate
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BKFirmwareRevision;


/// @class      BKBlukiiDescription
///
/// The BKBlukiiDescription class represents the information from the Device Info Profile of blukii, given as a CBPeripheral object. If the underlying characteristics have not been read yet, these information must be retrieved asynchronously using the method determineDeviceInformation:completion:.
///
/// BKBlukiiDescription also provides the possibility to check wheter a given CBPeripheral is a blukii device, using its advertising data. See isBlukiiDevice:
SWIFT_CLASS("_TtC9BlukiiKit19BKBlukiiDescription")
@interface BKBlukiiDescription : NSObject <CBPeripheralDelegate>

/// @property   name
///
/// Represents the local device name of the encapsulated CBPeripheral.
@property (nonatomic, copy) NSString * __nonnull name;

/// @property   peripheral
///
/// The CBPeripheral, that was usesd to instantiate the object
@property (nonatomic, readonly) CBPeripheral * __nonnull peripheral;

/// @property   firmwareRevisionString
///
/// A String containing the current firmware revision of the blukii. Only available after calling determineDeviceInformation:
///
/// @see        determineDeviceInformation:
@property (nonatomic, readonly, copy) NSString * __nullable firmwareRevisionString;

/// @property   firmwareRevision
///
/// The current firmware revision of the blukii as a BKFirmwareRevision object. Only available after calling determineDeviceInformation:
///
/// @see        determineDeviceInformation:
@property (nonatomic, readonly) BKFirmwareRevision * __nullable firmwareRevision;

/// @property   hardwareRevision
///
/// A String containing the current hardware revision of the blukii. Only available after calling
///
/// @see        determineDeviceInformation:
@property (nonatomic, readonly, copy) NSString * __nullable hardwareRevision;

/// @property   manufacterName
///
/// A String containing the manufacter name of the blukii. Only available after calling
///
/// @see        determineDeviceInformation:
@property (nonatomic, readonly, copy) NSString * __nullable manufacterName;

/// @method     isBlukiiDevice:
///
/// Determines wheter a given CBPeripheral is a blukii device by using the local device name.
///
/// @param      peripheral  The CBPeripheral, that shall be checked
+ (BOOL)isBlukiiDevice:(CBPeripheral * __nonnull)peripheral;

/// Creates a new instance with a given connected CBPeripheral.
///
/// @param      peripheral  The peripheral, that shall be used to initialize the instance.
///
/// @attention  Throws an exception if the given peripheral is not a blukii or the state is not .Connected. Use the function isBlukiiDevice: to check whether a peripheral represents a blukii or not.
///
/// @see        isBlukiiDevice:
/// @seealso    CBPeripheralState
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithPeripheral:(CBPeripheral * __nonnull)peripheral OBJC_DESIGNATED_INITIALIZER;

/// @method     determineDeviceInformation:
///
/// Determines the device information of the encapsulated CBPeripheral.
///
/// @param      completion  A BKDeviceInfoDeterminationCompletion that shall be called upon the completion of the determination process.
///
/// @see        BKDeviceInfoDeterminationCompletion
- (void)determineDeviceInformationWithCompleteWith:(void (^ __nonnull)(NSError * __nullable))completion;
- (void)peripheral:(CBPeripheral * __null_unspecified)peripheral didDiscoverServices:(NSError * __null_unspecified)error;
- (void)peripheral:(CBPeripheral * __null_unspecified)peripheral didDiscoverCharacteristicsForService:(CBService * __null_unspecified)service error:(NSError * __null_unspecified)error;
- (void)peripheral:(CBPeripheral * __null_unspecified)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * __null_unspecified)characteristic error:(NSError * __null_unspecified)error;
@end

@class BKServiceProfileHandler;
@class BKRecordingProfileHandler;
@class BKTemperatureProfileHandler;
@class BKDirectometerProfileHandler;
@class BKHumidityProfileHandler;
@class BKLightProfileHandler;


/// @class      BKBlukiiDeviceContext
///
/// The BKBlukiiDeviceContext class represents the current context of one blukii device. Whenever a BKProfileLoader succeeds to load a certain profile for a given BKBlukiiDescription it will determine wheter the given BKBlukiiDescription already belongs to a BKBlukiiDeviceContext instance. If so BKProfileLoader will add the resulting BKProfileHandler for the loaded profile to that existing context. Otherwise it will create a new BKBlukiiDeviceContext and add the BKProfileHandler.
/// The basic function of a BKBlukiiDeviceContext is pretty simple. It maintains a set of BKProfileHandler objects, which result from loading a profile. After a BKProfleLoader succeeded loading the a profile it will set the delegate of the underlying CBPeripheral of the BKBlukiiDescription to the associated BKBlukiiDeviceContext. The BKBlukiiDeviceContext will now distribute the peripheral callbacks to the appropriate BKProfileHandler.
/// In applications, in which you want to use more advanced CBPeripheral features or in which you need to set the perihperals delegate to a different object, you can forward the delegate callbacks to the BKBlukiiDeviceContext by using the the following methods:
///
/// <ul><li><p>handleDidUpdateValueForCharacteristic:fromPeripheral:error:</p></li><li><p>handleDidWriteValueForCharacteristic:fromPeripheral:error:</p></li><li><p>handleDidUpdateSubscriptionForCharacteristic:fromPeripheral:error:</p></li></ul>
/// @attention  If there is a CBPeripheral, which belongs to more than one BKBlukiiDescription, and one of these BKBlukiiDescriptions alredy belongs to a BKBlukiiDeviceContext you must not load a profile for one of the other BKBlukiiDescriptions. Elsewise the concrete BKProfileLoader will not find a BKBlukiiDeviceContext, associated with the BKBlukiiDescription, and create a new context. This will lead to multiple BKBlukiiDeviceContexts for one peripheral. In such a situation peripheral callbacks may not be assigned unambiguously to one BKBlukiiDeviceContext. To ensure your application will never run into such a situation the BKBlukiiDeviceContext class will send a notifcation to all existing instances in its initializer. This notification contains the underlying CBPeripheral object of the BKBlukiiDescription, that a BKBlukiiDeviceContext instance should be created for. The receiving BKBlukiiDeviceContext instances will check if the underlying CBPeripheral object of their associated BKBlukiiDescription instances is equal to the one, included in the notification. If there is a match in one instance it will raise a BKMultipleDeviceContextsForPeripheralException.
///
/// @see        BKProfileLoader
/// @see        BKProfileHandler
/// @see        BKBlukiiDescription
SWIFT_CLASS("_TtC9BlukiiKit21BKBlukiiDeviceContext")
@interface BKBlukiiDeviceContext : NSObject <CBPeripheralDelegate>

/// @property   blukiiDescription
///
/// The BKBlukiiDescription, which belongs to the BKBlukiiDeviceContext instance.
@property (nonatomic, readonly) BKBlukiiDescription * __nonnull blukiiDescription;

/// @property   batteryService
///
/// Handles the interaction with Battery Service Profile. Call loadProfileForBlukii:completeWith: on a BKBatteryServiceProfileLaoder with the BKBlukiiDescription in blukiiDescription to add an instance of that handler to a BKBlukiiDeviceContext.
///
/// @see        BKBatteryServiceProfileHandler
///
/// @seealso    BKBatteryServiceProfileLaoder
@property (nonatomic, readonly) BKBatteryServiceProfileHandler * __nullable batteryService;

/// @property   service
///
/// Handles the interaction with Service Profile. Call loadProfileForBlukii:completeWith: on a BKServiceProfileLoader with the BKBlukiiDescription in blukiiDescription to add an instance of that handler to a BKBlukiiDeviceContext.
///
/// @see        BKServiceProfileHandler
///
/// @seealso    BKServiceProfileLoader
@property (nonatomic, readonly) BKServiceProfileHandler * __nullable service;

/// @property   recording
///
/// Handles the interaction with Recording Profile. Call loadProfileForBlukii:completeWith: on a BKRecordingProfileLoader with the BKBlukiiDescription in blukiiDescription to add an instance of that handler to a BKBlukiiDeviceContext.
///
/// @see        BKRecordingProfileHandler
///
/// @seealso    BKRecordingProfileLoader
@property (nonatomic, readonly) BKRecordingProfileHandler * __nullable recording;

/// @property   accelerometer
///
/// Handles the interaction with Accelerometer Profile. Call loadProfileForBlukii:completeWith: on a BKAccelerometerProfileLoader with the BKBlukiiDescription in blukiiDescription to add an instance of that handler to a BKBlukiiDeviceContext.
///
/// @see        BKAccelerometerProfileHandler
///
/// @seealso    BKAccelerometerProfileLoader
@property (nonatomic, readonly) BKAccelerometerProfileHandler * __nullable accelerometer;

/// @property   temperature
///
/// Handles the interaction with Temperature Profile. Call loadProfileForBlukii:completeWith: on a BKTemperatureProfileLoader with the BKBlukiiDescription in blukiiDescription to add an instance of that handler to a BKBlukiiDeviceContext.
///
/// @see        BKTemperatureProfileHandler
///
/// @seealso    BKTemperatureProfileLoader
@property (nonatomic, readonly) BKTemperatureProfileHandler * __nullable temperature;

/// @property   directometer
///
/// Handles the interaction with Directometer Profile. Call loadProfileForBlukii:completeWith: on a BKDirectometerProfileLoader with the BKBlukiiDescription in blukiiDescription to add an instance of that handler to a BKBlukiiDeviceContext.
///
/// @see        BKDirectometerProfileHandler
///
/// @seealso    BKDirectometerProfileLoader
@property (nonatomic, readonly) BKDirectometerProfileHandler * __nullable directometer;

/// @property   humidity
///
/// Handles the interaction with Humidity Profile. Call loadProfileForBlukii:completeWith: on a BKHumidityProfileLoader with the BKBlukiiDescription in blukiiDescription to add an instance of that handler to a BKBlukiiDeviceContext.
///
/// @see        BKHumidityProfileHandler
///
/// @seealso    BKHumidityProfileLoader
@property (nonatomic, readonly) BKHumidityProfileHandler * __nullable humidity;

/// @property   light
///
/// Handles the interaction with Light Profile. Call loadProfileForBlukii:completeWith: on a BKLightProfileLoader with the BKBlukiiDescription in blukiiDescription to add an instance of that handler to a BKBlukiiDeviceContext.
///
/// @see        BKLightProfileHandler
///
/// @seealso    BKLightProfileLoader
@property (nonatomic, readonly) BKLightProfileHandler * __nullable light;

/// @property   altimeter
///
/// Handles the interaction with Altimeter Profile. Call loadProfileForBlukii:completeWith: on a BKAltimeterProfileLoader with the BKBlukiiDescription in blukiiDescription to add an instance of that handler to a BKBlukiiDeviceContext.
///
/// @see        BKAltimeterProfileHandler
///
/// @seealso    BKAltimeterProfileLoader
@property (nonatomic, readonly) BKAltimeterProfileHandler * __nullable altimeter;

/// @method     handleDidUpdateValueForCharacteristic:fromPeripheral:error:
///
/// Use this method to forward a call of the peripheral:didUpdateValueForCharacteristic:error: method from the CBPeripheralDelegate protocol. This might be useful in applications, which need to work directly with CoreBlueooth, where the peripheral delegates are not set to a BKBlukiiDeviceContext but should still use the BKProfileHandlers.
///
/// @param      characteristic  The CBCharacteristic from the callback.
///
/// @param      peripheral      The CBPeripheral from the callback.
///
/// @param      error           The NSError from the callback.
///
/// @attention  Make sure the calling peripheral is the one, associated with the BKBlukiiDeviceContext you call this mehtod on. Otherwise the BKBlukiiDeviceContext will raise an BKInvalidPeripheralException.
- (void)handleDidUpdateValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic fromPeripheral:(CBPeripheral * __nonnull)peripheral error:(NSError * __nullable)error;

/// @method     handleDidWriteValueForCharacteristic:fromPeripheral:error:
///
/// Use this method to forward a call of the peripheral:didWriteValueForCharacteristic:error: method from the CBPeripheralDelegate protocol. This might be useful in applications, which need to work directly with CoreBlueooth, where the peripheral delegates are not set to a BKBlukiiDeviceContext but should still use the BKProfileHandlers.
///
/// @param      characteristic  The CBCharacteristic from the callback.
///
/// @param      peripheral      The CBPeripheral from the callback.
///
/// @param      error           The NSError from the callback.
///
/// @attention  Make sure the calling peripheral is the one, associated with the BKBlukiiDeviceContext you call this mehtod on. Otherwise the BKBlukiiDeviceContext will raise an BKInvalidPeripheralException.
- (void)handleDidWriteValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic fromPeripheral:(CBPeripheral * __nonnull)peripheral error:(NSError * __nullable)error;

/// @method     handleDidUpdateSubscriptionForCharacteristic:fromPeripheral:error:
///
/// Use this method to forward a call of the peripheral:didUpdateNotificationStateForCharacteristic:error: method from the CBPeripheralDelegate protocol. This might be useful in applications, which need to work directly with CoreBlueooth, where the peripheral delegates are not set to a BKBlukiiDeviceContext but should still use the BKProfileHandlers.
///
/// @param      characteristic  The CBCharacteristic from the callback.
///
/// @param      peripheral      The CBPeripheral from the callback.
///
/// @param      error           The NSError from the callback.
///
/// @attention  Make sure the calling peripheral is the one, associated with the BKBlukiiDeviceContext you call this mehtod on. Otherwise the BKBlukiiDeviceContext will raise an BKInvalidPeripheralException.
- (void)handleDidUpdateSubscriptionForCharacteristic:(CBCharacteristic * __nonnull)characteristic fromPeripheral:(CBPeripheral * __nonnull)peripheral error:(NSError * __nullable)error;
- (void)peripheral:(CBPeripheral * __null_unspecified)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * __null_unspecified)characteristic error:(NSError * __null_unspecified)error;
- (void)peripheral:(CBPeripheral * __null_unspecified)peripheral didWriteValueForCharacteristic:(CBCharacteristic * __null_unspecified)characteristic error:(NSError * __null_unspecified)error;
- (void)peripheral:(CBPeripheral * __null_unspecified)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * __null_unspecified)characteristic error:(NSError * __null_unspecified)error;
@end


SWIFT_CLASS("_TtC9BlukiiKit28BKDirectometerProfileHandler")
@interface BKDirectometerProfileHandler : BKEnableableProfileHandlerTemplate
- (void)handleDidUpdateValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)handleDidWriteValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)handleDidUpdateSubscriptionForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)updateXValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToXValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotify:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotify;
- (void)unsubscribeFromXValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateYValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToYValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotify:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotify;
- (void)unsubscribeFromYValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateZValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToZValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotify:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotify;
- (void)unsubscribeFromZValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateXValueRaw:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToXValueRaw:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotify:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotify;
- (void)unsubscribeFromXValueRaw:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateYValueRaw:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToYValueRaw:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotify:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotify;
- (void)unsubscribeFromYValueRaw:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateZValueRaw:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToZValueRaw:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotify:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotify;
- (void)unsubscribeFromZValueRaw:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updatePositionMonitoring:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)useCurrentPositionAsFirstMonitoringReference:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)useCurrentPositionAsSecondMonitoringReference:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)deactivatePositionMonitoring:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToPositionMonitoring:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotify:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotify;
- (void)unsubscribeFromPositionMonitoring:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)activateHeading:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)deactivateHeading:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToHeading:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotify:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotify;
- (void)unsubscribeFromHeading:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithBlukii:(BKBlukiiDescription * __nonnull)blukii OBJC_DESIGNATED_INITIALIZER;
@end



/// @class  BKDirectometerProfileLoader
///
/// A concrete BKProfileLoader to load the Directometer profile.
SWIFT_CLASS("_TtC9BlukiiKit27BKDirectometerProfileLoader")
@interface BKDirectometerProfileLoader : BKProfileLoaderTemplate
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// @class  BKFirmwareRevision
///
/// BKFirmwareRevision implements rich representation of a revision number. In opposition to a representation as a String BKFirmwareRevision holds the components, seperated by a dot, as an array with the most significant at the index zero.
///
/// The revision string "4.7.1.1" for example would result in [4, 7, 1, 1] as an array of integers.
///
/// The following operators are also overloaded to compare BKFirmwareRevision objects: ==, !=, <, > <=, >=
SWIFT_CLASS("_TtC9BlukiiKit18BKFirmwareRevision")
@interface BKFirmwareRevision : NSObject

/// @property   revisionComponents
///
/// The revision components as an array of integers with the most significant component at the index zero.
@property (nonatomic, readonly, copy) NSArray * __nonnull revisionComponents;

/// Initializes a instance with a given revision as a String. The comonents will be seperated by a dot and the integer values of the resulted substrings will be stored in the revisionComponents property.
///
/// @param  string  The revision as String
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithString:(NSString * __nonnull)string OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSArray * __nonnull _revisionComponents;
@end


SWIFT_CLASS("_TtC9BlukiiKit24BKHumidityProfileHandler")
@interface BKHumidityProfileHandler : BKEnableableProfileHandlerTemplate
- (void)handleDidUpdateValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)handleDidWriteValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)handleDidUpdateSubscriptionForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)updateValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToValueCharacteristic:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotify:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotify;
- (void)unsubscribeFromValueCharacteristic:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithBlukii:(BKBlukiiDescription * __nonnull)blukii OBJC_DESIGNATED_INITIALIZER;
@end



/// @class  BKHumidityProfileLoader
///
/// A concrete BKProfileLoader to load the Humidity profile.
SWIFT_CLASS("_TtC9BlukiiKit23BKHumidityProfileLoader")
@interface BKHumidityProfileLoader : BKProfileLoaderTemplate
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9BlukiiKit21BKLightProfileHandler")
@interface BKLightProfileHandler : BKEnableableProfileHandlerTemplate
- (void)handleDidUpdateValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)handleDidWriteValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)handleDidUpdateSubscriptionForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)updateValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToValueCharacteristic:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotify:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotify;
- (void)unsubscribeFromValueCharacteristic:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateLightMode:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateEventConfig:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)changeLightEventConfig:(uint32_t)config completion:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateEventState:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToEventStateCharacteristic:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotify:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotify;
- (void)unsubscribeFromEventStateCharacteristic:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithBlukii:(BKBlukiiDescription * __nonnull)blukii OBJC_DESIGNATED_INITIALIZER;
@end



/// @class  BKLightProfileLoader
///
/// A concrete BKProfileLoader to load the Light profile.
SWIFT_CLASS("_TtC9BlukiiKit20BKLightProfileLoader")
@interface BKLightProfileLoader : BKProfileLoaderTemplate
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class NSData;

SWIFT_CLASS("_TtC9BlukiiKit25BKRecordingProfileHandler")
@interface BKRecordingProfileHandler : BKEnableableProfileHandlerTemplate
- (void)handleDidUpdateValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)handleDidWriteValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)handleDidUpdateSubscriptionForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)updatePassword:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)changePasswordTo:(uint32_t)password completion:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)resetPassword:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateData:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)enableReading:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)disableReading:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateSensorConfig:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateMode:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)changeModeToInterval:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)changeModeToEvent:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)changeModeToEventAndInterval:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateInterval:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)changeIntervalTo:(uint32_t)value completion:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateDatasetLimit:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)changeDatasetLimitTo:(uint16_t)value completion:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)abrogateDatasetLimit:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateStepDetection:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)changeStepDetectionThresholdTo:(uint8_t)value completion:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateAccelerometerRange:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateAccelerometerEventConfig:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateAccelerometerEventMode:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateMagnetometerRange:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateMagnetometerThreshold:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)changeMagnetometerThresholdTo:(int16_t)threshold completion:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateMagnetometerAxisConfig:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateLightMode:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateLightEventConfig:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateTemperatureEventConfig:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateAltimeterMode:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateAltimeterEventConfig:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)parseParameterDataset:(NSData * __nonnull)dataset;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithBlukii:(BKBlukiiDescription * __nonnull)blukii OBJC_DESIGNATED_INITIALIZER;
@end



/// @class  BKRecordingProfileLoader
///
/// A concrete BKProfileLoader to load the Recording profile.
SWIFT_CLASS("_TtC9BlukiiKit24BKRecordingProfileLoader")
@interface BKRecordingProfileLoader : BKProfileLoaderTemplate
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9BlukiiKit23BKServiceProfileHandler")
@interface BKServiceProfileHandler : BKProfileHandlerTemplate
- (void)updateMagnetometerCalibrationState:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)startMagnetometerCalibration:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToMagnetometerCalibrationState:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotifiy:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotifiy;
- (void)unsubscribeFromMagnetometerCalibrationState:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)handleDidUpdateValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)handleDidWriteValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)handleDidUpdateSubscriptionForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithBlukii:(BKBlukiiDescription * __nonnull)blukii OBJC_DESIGNATED_INITIALIZER;
@end



/// @class  BKServiceProfileLoader
///
/// A concrete BKProfileLoader to load the Service profile.
SWIFT_CLASS("_TtC9BlukiiKit22BKServiceProfileLoader")
@interface BKServiceProfileLoader : BKProfileLoaderTemplate
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9BlukiiKit27BKTemperatureProfileHandler")
@interface BKTemperatureProfileHandler : BKEnableableProfileHandlerTemplate
- (void)handleDidUpdateValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)handleDidWriteValueForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)handleDidUpdateSubscriptionForCharacteristic:(CBCharacteristic * __nonnull)characteristic error:(NSError * __nullable)error;
- (void)updateValue:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToValueCharacteristic:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotify:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotify;
- (void)unsubscribeFromValueCharacteristic:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateEventConfig:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)updateEventState:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)activateTemperatureMonitoring:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)deactivateTemperatureMonitoring:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (void)subscribeToEventState:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion callOnNotify:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))onNotify;
- (void)unsubscribeFromEventState:(void (^ __nonnull)(CBCharacteristic * __nonnull, NSError * __nullable))completion;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithBlukii:(BKBlukiiDescription * __nonnull)blukii OBJC_DESIGNATED_INITIALIZER;
@end



/// @class  BKTemperatureProfileLoader
///
/// A concrete BKProfileLoader to load the Temperature profile.
SWIFT_CLASS("_TtC9BlukiiKit26BKTemperatureProfileLoader")
@interface BKTemperatureProfileLoader : BKProfileLoaderTemplate
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSData (SWIFT_EXTENSION(BlukiiKit))
@end

#pragma clang diagnostic pop
